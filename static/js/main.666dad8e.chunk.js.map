{"version":3,"sources":["WeatherCard.js","WeatherAndDate.js","WeatherCardLite.js","App.js","serviceWorker.js","index.js"],"names":["WeatherCard","_ref","condition","feelsLike","icon","location","temperature","react_default","a","createElement","className","name","region","moment","format","src","alt","WeatherAndDate","date","WeatherCardLite","maxTemp","minTemp","api","concat","process","App","_useState","useState","_useState2","Object","slicedToArray","setCurrentLocation","_useState3","_useState4","currentWeather","setCurrentWeather","_useState5","_useState6","forecast","setForecast","useEffect","fetch","then","results","json","data","console","log","_data$current","current","feelslike_f","temp_f","forecastday","_data$location","hot","cold","moderate","appClass","classnames","WeatherCard_WeatherCard","text","map","weatherDay","key","date_epoch","WeatherAndDate_WeatherAndDate","day","WeatherCardLite_WeatherCardLite","maxtemp_f","mintemp_f","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.666dad8e.chunk.js","sourcesContent":["import React from 'react';\nimport './WeatherCard.css';\nimport moment from 'moment';\n\nexport default function WeatherCard({\n  condition,\n  feelsLike,\n  icon,\n  location,\n  temperature,\n}) {\n  return (\n    <section className='weather-card'>\n      <div className='location'>\n        <h1>{location.name}</h1>\n        <h3>{location.region}</h3>\n        <span>{moment().format('dddd, MMMM D, YYYY')}</span>\n      </div>\n      <div className='weather'>\n        <div className='current-temperature'>\n          <img src={icon} alt={condition} />\n          <h1>{temperature}째F</h1>\n        </div>\n        <span>Feels Like: {feelsLike}째F</span>\n        <span>{condition}</span>\n      </div>\n    </section>\n  );\n}","import React from 'react';\nimport moment from 'moment';\nimport './WeatherAndDate.css';\n\nexport default function WeatherAndDate({\n  condition,\n  date,\n  icon,\n}) {\n  return (\n    <div className='weather-and-date'>\n      <span>{moment(date).format('ddd')}</span>\n      <img className='condition' src={icon} alt={condition} />\n    </div>\n  );\n}","import React from 'react';\nimport './WeatherCardLite.css';\n\nexport default function WeatherCardLite({\n  maxTemp,\n  minTemp,\n}) {\n  return (\n    <div className='weather-card-lite'>\n      <span>{maxTemp}째F</span>\n      <span>{minTemp}째F</span>\n    </div>\n  );\n}","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport classnames from 'classnames';\nimport WeatherCard from './WeatherCard';\nimport WeatherAndDate from './WeatherAndDate';\nimport WeatherCardLite from './WeatherCardLite';\n\nconst api_key = process.env.REACT_APP_WEATHER_API_KEY;\nconst api = `http://api.apixu.com/v1/forecast.json?key=${api_key}&q=Boston&days=7`;\n\nfunction App() {\n  const [location, setCurrentLocation] = useState(null);\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [forecast, setForecast] = useState(null);\n\n  useEffect(() => {\n    fetch(api)\n      .then(results => results.json())\n      .then(data => {\n        console.log(data);\n        const {\n          current: {\n            condition,\n            feelslike_f,\n            temp_f,\n          },\n          forecast: {\n            forecastday,\n          },\n          location: {\n            name,\n            region,\n          },\n        } = data;\n        setCurrentLocation({\n          name,\n          region,\n        });\n        setCurrentWeather({\n          condition,\n          feelsLike: feelslike_f,\n          temperature: temp_f,\n        });\n        setForecast(forecastday);\n      });\n  }, []);\n\n  const hot = currentWeather && currentWeather.feelsLike > 85;\n  const cold = currentWeather && currentWeather.feelsLike < 50;\n  const moderate = currentWeather && currentWeather.feelsLike > 50\n    && currentWeather.feelsLike < 85;\n\n  const appClass = classnames('app', {\n    hot,\n    moderate,\n    cold,\n  });\n\n  return (\n    <div className={appClass}>\n      <div className='forecast'>\n        {currentWeather && <div className='currently'>\n          <WeatherCard\n            condition={currentWeather.condition.text}\n            feelsLike={currentWeather.feelsLike}\n            icon={currentWeather.condition.icon}\n            location={location}\n            temperature={currentWeather.temperature}\n          />\n        </div>}\n        {forecast && <div className='seven-day-forecast'>\n          {forecast.map((weatherDay) => (\n            <div className='day' key={`weather-${weatherDay.date_epoch}`}>\n              <WeatherAndDate\n                condition={weatherDay.day.condition.text}\n                date={weatherDay.date}\n                icon={weatherDay.day.condition.icon}\n              />\n              <WeatherCardLite\n                condition={weatherDay.day.condition.text}\n                maxTemp={weatherDay.day.maxtemp_f}\n                minTemp={weatherDay.day.mintemp_f}\n              />\n            </div>\n          ))}\n        </div>}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}